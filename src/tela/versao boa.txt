// Projeto: Pomodoro com ESP32
#include <TFT_eSPI.h>
#include <SPI.h>
#include <Arduino.h>
#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <ESP32Servo.h>

#define BUZZER_PIN 22
#define BUTTON_PIN 36
static const int servoPin = 5;

Servo servo1;

AsyncWebServer server(80);
const char* ssid = "Redmi Note 14";
const char* password = "giugiu24";
TFT_eSPI tft = TFT_eSPI();

//const int tempoTrabalho = 25;  // pode ajustar para 1500 (25min) se quiser
//const int tempoPausa = 5;

//uint32_t lastSecond = 0;
//int tempoRestante = tempoTrabalho;
//bool emTrabalho = true;
//bool somTocado = false;
//bool cicloFinalizado = false;
//bool pomodoroIniciado = false;

const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE html>
<html>
  <head>
    <title>Pomodoro com ESP32</title>
  </head>
  <body>
    <h1>Pomodoro em andamento...</h1>
    <p id="status">Status: Aguardando início...</p>

    <form onsubmit="enviarConfiguracao(); return false;">
      <label>Tempo de trabalho: <input type="number" id="foco" value="25*60"></label><br>
      <label>Tempo de pausa: <input type="number" id="pausa" value="5*60"></label><br>
      <button type="submit">Atualizar Ciclos</button>
    </form>

    <script>
      function enviarConfiguracao() {
        const foco = document.getElementById("foco").value;
        const pausa = document.getElementById("pausa").value;

        fetch("/config", {
          method: "POST",
          headers: { "Content-Type": "application/x-www-form-urlencoded" },
          body: `foco=${foco}&pausa=${pausa}`
        }).then(res => {
          if (res.ok) {
            alert("Ciclos atualizados!");
          }
        });
      }

      setInterval(() => {
        fetch("/status")
          .then(res => res.json())
          .then(data => {
            document.getElementById("status").innerHTML = data.emTrabalho ? "Status: Trabalho" : "Status: Pausa";
            if (data.fim) {
              alert("Ciclo finalizado!");
            }
          })
          .catch(err => console.error(err));
      }, 2000);
    </script>
  </body>
</html>
)rawliteral";

// Variáveis de controle
uint32_t lastSecond = 0;
int duracaoFoco = 25*60; // 25 minutos
int duracaoPausa = 5*60; // 5 minutos
int tempoRestante = duracaoFoco;
bool emTrabalho = true;
bool somTocado = false;
bool cicloFinalizado = false;
bool pomodoroIniciado = false;

// ----------------- Funções de som ---------------------
void playTone(int freq, int dur) {
  ledcSetup(0, freq, 8);
  ledcAttachPin(BUZZER_PIN, 0);
  ledcWrite(0, 128);
  delay(dur);
  ledcWrite(0, 0);
}

void playWorkEndTone() {
  playTone(1000, 200); delay(100);
  playTone(1200, 200); delay(100);
  playTone(1500, 300);
}

void playBreakEndTone() {
  playTone(500, 500);
}

void atualizarTela() {
  uint16_t bgColor = emTrabalho ? TFT_DARKGREEN : TFT_NAVY;
  tft.fillRect(0, 40, 240, 160, bgColor);

  tft.setTextSize(2);
  tft.setCursor(20, 50);

  if (!pomodoroIniciado) {
    tft.setTextColor(TFT_YELLOW, TFT_BLACK);
    tft.print("Pressione o botao");
    tft.setCursor(20, 80);
    tft.print("para iniciar!");
  } 
  else {
    // Exibir mm:ss
    int minutos = tempoRestante / 60;
    int segundos = tempoRestante % 60;

    tft.setTextSize(6);
    tft.setCursor(60, 100);
    if (minutos < 10) tft.print("0");
    tft.print(minutos);
    tft.print(":");
    if (segundos < 10) tft.print("0");
    tft.print(segundos);
  }
}

void servo_motor(){
  for(int posDegrees = 0; posDegrees <= 180; posDegrees++) {
    servo1.write(posDegrees);
    //Serial.println(posDegrees);
    delay(20);
  }
}


void iniciarFaseTrabalho() {
  emTrabalho = true;
  tempoRestante = duracaoFoco;
  Serial.println("Iniciando trabalho");
}

void encerrarFaseTrabalho() {
  // playWorkEndTone();
  // iniciarFasePausa();
}

void iniciarFasePausa() {
  emTrabalho = false;
  tempoRestante = duracaoPausa;
  Serial.println("Iniciando pausa");
}

void encerrarFasePausa() {
  // playBreakEndTone();
  // cicloFinalizado = true;
  // iniciarFaseTrabalho();
}

void setup() {
  Serial.begin(115200);
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(BUTTON_PIN, INPUT);  // GPIO36 NÃO tem INPUT_PULLUP, então usamos INPUT
  servo1.attach(servoPin);  

  tft.init();
  tft.setRotation(1);
  tft.fillScreen(TFT_BLACK);
  tft.setTextColor(TFT_YELLOW, TFT_BLACK);
  tft.setTextSize(2);
  tft.setCursor(10, 10);
  tft.print("Pomodoro configuravel");
  delay(1000);

  atualizarTela();

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  delay(1000);
  Serial.println("\nConectado ao WiFi");
  Serial.print("IP do ESP32: ");
  Serial.println(WiFi.localIP());


  // Mostra IP no canto inferior direito em amarelo
  String ipStr = "IP: " + WiFi.localIP().toString();
  int16_t x1, y1;
  uint16_t w, h;
  tft.setTextSize(1);
  tft.setTextColor(TFT_YELLOW, TFT_BLACK);
  w = tft.textWidth((char*)ipStr.c_str());  // Calcula a largura do texto
  tft.setCursor(240 - w - 5, 230);  // posição ajustada para canto inferior direito
  tft.print(ipStr);

  server.on("/", HTTP_GET, [](AsyncWebServerRequest *req){
    req->send_P(200, "text/html", index_html);
  });

  server.on("/status", HTTP_GET, [](AsyncWebServerRequest *req){
    String json = String("{\"fim\":") + (cicloFinalizado ? "true" : "false")
                + String(",\"emTrabalho\":") + (emTrabalho ? "true" : "false")
                + String(",\"iniciado\":") + (pomodoroIniciado ? "true" : "false")
                + String("}");
    req->send(200, "application/json", json);
    cicloFinalizado = false;
  });

  // Rota para configurar tempos
  server.on("/config", HTTP_POST, [](AsyncWebServerRequest *req){
    if (req->hasParam("foco", true) && req->hasParam("pausa", true)) {
      duracaoFoco = req->getParam("foco", true)->value().toInt()*60;
      duracaoPausa = req->getParam("pausa", true)->value().toInt()*60;
      tempoRestante = emTrabalho ? duracaoFoco : duracaoPausa;

      Serial.printf("Novo foco: %ds, nova pausa: %ds\n", duracaoFoco, duracaoPausa);
      req->send(200, "text/plain", "Ciclos atualizados");
    } else {
      req->send(400, "text/plain", "Parâmetros inválidos");
    }
  });

  server.begin();
  Serial.println("Servidor iniciado");
}

int num_ciclos = 1;

// ---------------- Loop Principal ---------------------
void loop() {

  if (!pomodoroIniciado && digitalRead(BUTTON_PIN) == HIGH) {
    delay(200);  // debounce
    Serial.println("Pomodoro iniciado!");
    //servo_motor();
    //delay(1000);
    pomodoroIniciado = true;
    iniciarFaseTrabalho();
    atualizarTela();
    lastSecond = millis();
  }

  if (pomodoroIniciado && millis() - lastSecond >= 1000 && num_ciclos > 0) {

    lastSecond += 1000;
    tempoRestante--;

    if (tempoRestante >= 0) {
      atualizarTela();
    }

    if (tempoRestante < 0 && !somTocado) {
      somTocado = true;

      if (emTrabalho) {
        //encerrarFaseTrabalho();
        playWorkEndTone();
        iniciarFasePausa();
      }
      else {
        //encerrarFasePausa();
        playBreakEndTone();
        cicloFinalizado = true;
        if(num_ciclos > 1){
          iniciarFaseTrabalho();
        }
        num_ciclos--;
      }

      atualizarTela();
    }

    if (somTocado && tempoRestante >= 0) {
      somTocado = false;
    }
  }
  if(num_ciclos <= 0 && cicloFinalizado == true) {//eh p dar tipo 2h
    if(somTocado == true){
      somTocado = false;
      cicloFinalizado = true;
      playWorkEndTone();
      // servo_motor();
      // delay(1000);
    }

    if(cicloFinalizado == true){
      cicloFinalizado = false;
      tft.fillScreen(TFT_BLACK);
      tft.setTextColor(TFT_YELLOW, TFT_BLACK);
      tft.setTextSize(2);
      tft.setCursor(10, 10);
      tft.print("FIM!");
    }
  }
}