#include "Pomodoro.h"

Pomodoro::Pomodoro() {
    remainingTime = 25*60; // 25 minutes
    working = true;
    tonePlayed = false;
    cycleFinished = false;
    lastSecond = millis();

    initDisplay();
}

Pomodoro::Pomodoro(int workTimeSeconds, int buzzerPin) {
    remainingTime = workTimeSeconds;
    working = true;
    tonePlayed = false;
    cycleFinished = false;
    lastSecond = millis();
    buzzer = Buzzer(buzzerPin);

    initDisplay();
}

void Pomodoro::initDisplay() {
    tft.init(); 
    tft.setRotation(1);
    tft.fillScreen(TFT_BLACK);
    tft.setTextColor(TFT_YELLOW, TFT_BLACK);
    tft.setTextSize(2);
    tft.setCursor(10,10);
    tft.print("Pomodoro: 25m work / 5m break");
}

void Pomodoro::updateDisplay() {
    tft.fillRect(0, 40, 240, 160, TFT_BLACK);
    tft.setCursor(20, 50);
    tft.setTextColor(working ? TFT_GREEN : TFT_CYAN, TFT_BLACK);
    tft.setTextSize(2);
    tft.print(working ? "Work time:" : "Break time:");

    int minutes = remainingTime / 60;
    int seconds = remainingTime % 60;

    tft.setTextSize(6);
    tft.setCursor(40, 100);
    if (minutes < 10) tft.print("0");
    tft.print(minutes);
    tft.print(":");
    if (seconds < 10) tft.print("0");
    tft.print(seconds);
}

void Pomodoro::run() {
    if (millis() - lastSecond >= 1000) {
        lastSecond += 1000;
        remainingTime--;

        if (remainingTime >= 0) {
            updateDisplay();
        }

        if (remainingTime < 0 && !tonePlayed) {
            tonePlayed = true;

            if (working) {
                buzzer.playWorkEndTone();
                remainingTime = 300; // 5 minutes break
            } else {
                cycleFinished = true;
                buzzer.playBreakEndTone();
                remainingTime = 1500; // 25 minutes work
            }

            working = !working;
            updateDisplay();
        }

        if (tonePlayed && remainingTime >= 0) {
            tonePlayed = false;
        }
    }
}

// Getters
int Pomodoro::getRemainingTime() {
    return remainingTime;
}
bool Pomodoro::isWorking() {
    return working;
}
bool Pomodoro::isTonePlayed() {
    return tonePlayed;
}
bool Pomodoro::isCycleFinished() {
    return cycleFinished;
}

// Setters
void Pomodoro::setRemainingTime(int time) {
    remainingTime = time;
}
void Pomodoro::setWorking(bool state) {
    working = state;
}
void Pomodoro::setTonePlayed(bool state) {
    tonePlayed = state;
}
void Pomodoro::setCycleFinished(bool state) {
    cycleFinished = state;
}
